#version 330 core
out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoord;

uniform vec3 u_camPos;
uniform vec3 u_lightColor;

struct Material
{
	sampler2D diffuseColor;
	sampler2D specularColor;
	float shininess;
};

struct Light
{
	vec3 position;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	
	float constant;
	float linear;
	float quadratic;
};

uniform Material material;
uniform Light light;

void main()
{
	float distance = length(FragPos - light.position);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

	//	LUZ AMBIENTE
	vec3 ambient = u_lightColor * light.ambient * vec3(texture(material.diffuseColor, TexCoord));
	
	//	LUZ DIFUSA
	vec3 normal = normalize(Normal);
	vec3 lightDir = normalize(light.position - normal);
	float diffuseValue = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = u_lightColor * light.diffuse * diffuseValue * vec3(texture(material.diffuseColor, TexCoord));
	
	//	LUZ ESPECULAR 
	vec3 reflectDir = reflect(-lightDir, normal);
	vec3 viewDir = normalize(u_camPos - FragPos);
	float specularValue = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = u_lightColor * light.specular * specularValue * vec3(texture(material.specularColor, TexCoord));
	
	ambient  *= attenuation;
	diffuse  *= attenuation;
	specular *= attenuation;
	
	vec3 result = (ambient + diffuse + specular);
	FragColor = vec4(result, 1.0f);
}